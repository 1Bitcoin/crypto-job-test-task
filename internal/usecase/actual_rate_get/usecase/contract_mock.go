// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"
	domain "testTask/internal/usecase/actual_rate_get/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockrateRepository is a mock of rateRepository interface.
type MockrateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockrateRepositoryMockRecorder
}

// MockrateRepositoryMockRecorder is the mock recorder for MockrateRepository.
type MockrateRepositoryMockRecorder struct {
	mock *MockrateRepository
}

// NewMockrateRepository creates a new mock instance.
func NewMockrateRepository(ctrl *gomock.Controller) *MockrateRepository {
	mock := &MockrateRepository{ctrl: ctrl}
	mock.recorder = &MockrateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrateRepository) EXPECT() *MockrateRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockrateRepository) Save(ctx context.Context, result domain.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockrateRepositoryMockRecorder) Save(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockrateRepository)(nil).Save), ctx, result)
}
