// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package getrates is a generated GoMock package.
package getrates

import (
	context "context"
	reflect "reflect"
	domain "testTask/internal/usecase/actual_rate_get/domain"

	gomock "github.com/golang/mock/gomock"
)

// Mockusecase is a mock of usecase interface.
type Mockusecase struct {
	ctrl     *gomock.Controller
	recorder *MockusecaseMockRecorder
}

// MockusecaseMockRecorder is the mock recorder for Mockusecase.
type MockusecaseMockRecorder struct {
	mock *Mockusecase
}

// NewMockusecase creates a new mock instance.
func NewMockusecase(ctrl *gomock.Controller) *Mockusecase {
	mock := &Mockusecase{ctrl: ctrl}
	mock.recorder = &MockusecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockusecase) EXPECT() *MockusecaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *Mockusecase) Handle(ctx context.Context, marketID string) (*domain.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, marketID)
	ret0, _ := ret[0].(*domain.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockusecaseMockRecorder) Handle(ctx, marketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*Mockusecase)(nil).Handle), ctx, marketID)
}
